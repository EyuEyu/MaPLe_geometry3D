fun forloop(i, stop, foo) =
      if i >= stop then
        ()   (* done *)
      else
        ( foo(i)                 (* do something at the current index, i *)
        ; forloop(i+1, stop, foo)   (* and then continue the loop at index i+1 *)
        )

fun mass_atomic v f = 
  let
    val nv = Seq.length v
    val nf = Seq.length f
    val result = ForkJoin.alloc nv
    
  in
    (* parallelly initialize all elements in result to 0.0 *)
    Parallel.parfor (0, nv) (fn i => Array.update (result, i, 0.0)); 

    (* parallelly calculate mass based on each face *)
    Parallel.parfor (0, nf) (fn i =>
      let
        val (i1, i2, i3) = Seq.nth f i
        val v1 = Seq.nth v i1
        val v2 = Seq.nth v i2
        val v3 = Seq.nth v i3
      in
        ForkJoin.par(fn () => atomic_array_update Real.+ (result, i1) (Vector.voronoi_areas_v1 v1 v2 v3) Real.==,
                      fn () => ForkJoin.par(
                        fn () => atomic_array_update Real.+ (result, i2) (Vector.voronoi_areas_v1 v2 v3 v1) Real.==,
                        fn () => atomic_array_update Real.+ (result, i3) (Vector.voronoi_areas_v1 v3 v1 v2) Real.==
                        ));
        ()
      end
    );

    (* Array to sequence *)
    ArraySlice.full result
  end

fun mass_seq v f = 
  let
    val nv = Seq.length v
    val nf = Seq.length f
    val result = ForkJoin.alloc nv
    
  in
    (* initialize all locks and elements in result to 0.0 *)
    forloop (0, nv, fn i => Array.update (result, i, 0.0)); 
    (* calculate mass based on each face *)
    forloop (0, nf, fn i =>
      let
        val (i1, i2, i3) = Seq.nth f i
        val v1 = Seq.nth v i1
        val v2 = Seq.nth v i2
        val v3 = Seq.nth v i3
      in
        Array.update (result, i1, Array.sub (result, i1) + (Vector.voronoi_areas_v1 v1 v2 v3));
        Array.update (result, i2, Array.sub (result, i2) + (Vector.voronoi_areas_v1 v2 v3 v1));
        Array.update (result, i3, Array.sub (result, i3) + (Vector.voronoi_areas_v1 v3 v1 v2))
      end
    );
    
    (* Array to sequence *)
    ArraySlice.full result
  end

    fun cot_triplet_array_draft v f =
    let 
      val ce = cotmatrix_entries v f
      val nf = Seq.length f
      val n_triplet = nf * 12
      val arr_triplet = ForkJoin.alloc n_triplet
    in
      Parallel.parforg 256 (0, nf) (fn i => 
        let
          val offset = 12 * i;
          val (v1, v2, v3) = Seq.nth f i
          val (c1, c2, c3) = Seq.nth ce i
        in
          Array.update (arr_triplet, offset,      (v1, v2,  c3));
          Array.update (arr_triplet, offset + 1,  (v2, v1,  c3));
          Array.update (arr_triplet, offset + 2,  (v1, v1, ~c3));
          Array.update (arr_triplet, offset + 3,  (v2, v2, ~c3));

          Array.update (arr_triplet, offset + 4,  (v2, v3,  c1));
          Array.update (arr_triplet, offset + 5,  (v3, v2,  c1));
          Array.update (arr_triplet, offset + 6,  (v2, v2, ~c1));
          Array.update (arr_triplet, offset + 7,  (v3, v3, ~c1));

          Array.update (arr_triplet, offset + 8,  (v3, v1,  c2));
          Array.update (arr_triplet, offset + 9,  (v1, v3,  c2));
          Array.update (arr_triplet, offset + 10, (v3, v3, ~c2));
          Array.update (arr_triplet, offset + 11, (v1, v1, ~c2))
        end
      );

      ArraySlice.full arr_triplet
    end